# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

include("Problems.jl")
include("sequence.jl")

function p002solution1(n::Integer=3_999_999)::Integer
    fibs = fibonacci_bound(n)
    running_sum = 0
    for val in fibs
        if val % 2 == 0
            running_sum += val
        end
    end
    return running_sum
end

function p002solution2(n::Integer=3_999_999)::Integer
    # It is only the 3*k+2 indexes that are even
    fibs = fibonacci_bound(n)
    return sum(fibs[2:3:length(fibs)])
end

p002 = Problems.Problem(Dict("one" => p002solution1, "two" => p002solution2))

Problems.benchmark(p002, 4000000 - 1)