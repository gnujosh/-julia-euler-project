# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
# first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?

include("Problems.jl")
include("factorization.jl")

# Cycle through triangular numbers, starting with a initial value using a high
# value starting point and incrementing the triangular number each iteration.
function p012solution_one(numdivisors::Integer=1)::Integer

    i = 10000
    # Uses the sum of series equation, allowing it to start at a larger number
    trinumber::Integer = i * (i - 1) / 2
    while length(factors(trinumber)) + 1 <= numdivisors
        trinumber += i
        i += 1
    end

    return trinumber
end

# Cycle through triangular numbers, setting the triangular number at each step
# using the sum of series equation.
function p012solution_two(numdivisors::Integer=1)::Integer

    i = 10000
    trinumber::Integer = 1
    while length(factors(trinumber)) + 1 <= numdivisors
        # Uses the sum of series equation, allowing it to start at a larger number
        trinumber = i * (i + 1) / 2
        i += 1
    end

    return trinumber
end

p012 = Problems.Problem(Dict("one" => p012solution_one, "two" => p012solution_two))

Problems.benchmark(p012, 500)